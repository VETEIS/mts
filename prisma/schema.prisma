// MTS (Modern Traffic System) Database Schema
// Philippine Traffic Violation Reporting System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core application models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(REPORTER)
  gcashQr       String?   // GCash QR code for payments
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  reports  Report[]
}

model Offense {
  id            String   @id @default(cuid())
  name          String
  description   String?
  penaltyAmount Float
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  reports Report[]
}

model Report {
  id                     String        @id @default(cuid())
  reportCode             String        @unique
  userId                 String
  offenseId              String
  status                 ReportStatus  @default(SUBMITTED)
  description            String?
  locationLat            Float?
  locationLng            Float?
  locationAccuracy       Int?          // GPS accuracy in meters
  locationAddress        String?       // Human readable address
  penaltyAmount          Float?
  reporterPercentage     Float         @default(70.0)
  developerPercentage    Float         @default(30.0)
  reporterEarnings       Float?        // Calculated earnings for reporter
  developerEarnings      Float?        // Calculated earnings for developer
  reporterPaymentStatus  PaymentStatus @default(PENDING)
  developerPaymentStatus PaymentStatus @default(PENDING)
  rejectionReason        String?       // Admin reason for rejection
  adminNotes             String?       // Internal admin notes
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt

  // Relations
  user   User      @relation(fields: [userId], references: [id])
  offense Offense  @relation(fields: [offenseId], references: [id])
  media  ReportMedia[]
}

model ReportMedia {
  id          String    @id @default(cuid())
  reportId    String
  type        MediaType
  url         String    // Cloudinary URL
  publicId    String    // Cloudinary public ID for management
  filename    String?
  filesize    Int?      // File size in bytes
  width       Int?      // For images/videos
  height      Int?      // For images/videos
  duration    Int?      // For videos (in seconds)
  createdAt   DateTime  @default(now())

  // Relations
  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

// Enums
enum Role {
  ADMIN
  REPORTER
}

enum ReportStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum MediaType {
  IMAGE
  VIDEO
}
